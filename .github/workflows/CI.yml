name: CI

on:
  push:
    branches:
      - master
    paths:
      - '**.c'
      - '**.h'
      - '**.yml'

jobs:
  examples:
    if: github.repository_owner == 'qitas'
    runs-on: ubuntu-latest #[self-hosted, Linux, X64] #
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: "recursive"
          fetch-depth: 1

      - name: Install
        run: |
          sudo apt update
          sudo apt install -y gcc-arm-none-eabi cmake libnewlib-arm-none-eabi libstdc++-arm-none-eabi-newlib

      - name: Checkout pico-sdk
        uses: actions/checkout@v3
        with:
          repository: SoCXin/pico-sdk
          ref: develop
          path: ${{github.workspace}}/pico-sdk

      - name: Checkout pico-sdk submodules
        working-directory: ${{github.workspace}}/pico-sdk
        run: git submodule update --init

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        working-directory: ${{github.workspace}}/RP2040/src/examples
        run:  cmake -E make_directory ${{github.workspace}}/RP2040/src/examples/build

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{github.workspace}}/RP2040/src/examples/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: PICO_SDK_PATH=${{github.workspace}}/pico-sdk cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE

      - name: Get core count
        id: core_count
        run : cat /proc/cpuinfo  | grep processor | wc -l

      - name: Build
        working-directory: ${{github.workspace}}/RP2040/src/examples/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --config $BUILD_TYPE --parallel ${{steps.core_count.outputs.output}}

      - uses: actions/upload-artifact@v3
        with:
          name: examples
          path: ${{github.workspace}}/RP2040/src/examples/build

  rust:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "recursive"
          fetch-depth: 1

      - name: actions-rs
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: thumbv6m-none-eabi
          override: true

      - name: rp2040-pac build
        working-directory: RP2040/src/template/rp2040-pac
        run: |
          cargo build --release
